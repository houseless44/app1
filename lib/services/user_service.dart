import 'package:cloud_firestore/cloud_firestore.dart';
import '../services/cloudinary_service.dart';
import '../models/user_model.dart';
import '../utils/security_utils.dart'; // ‚úÖ Import file b·∫£o m·∫≠t t√°ch ri√™ng

class UserService {
  final CollectionReference _usersCollection =
      FirebaseFirestore.instance.collection('users');
  final _cloudinaryService = CloudinaryService();

  // ====================================================
  // üë§ QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG
  // ====================================================

  /// üß© Th√™m ng∆∞·ªùi d√πng m·ªõi
  Future<void> addUser(AppUser user) async {
    try {
      // üîê Hash m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u
      final hashedPassword = SecurityUtils.hashPassword(user.password);

      final docRef = await _usersCollection.add({
        'username': user.username,
        'email': user.email,
        'password': hashedPassword,
        'imageUrl': user.imageUrl,
        'createdAt': FieldValue.serverTimestamp(),
      });

      // C·∫≠p nh·∫≠t l·∫°i id c·ªßa ch√≠nh document (ƒë·ªÉ ti·ªán l·∫•y sau n√†y)
      await _usersCollection.doc(docRef.id).update({'id': docRef.id});
    } catch (e) {
      throw Exception('L·ªói khi th√™m ng∆∞·ªùi d√πng: $e');
    }
  }

  /// üß© L·∫•y danh s√°ch ng∆∞·ªùi d√πng (realtime stream)
  Stream<List<AppUser>> getUsers() {
    return _usersCollection
        .orderBy('createdAt', descending: true)
        .snapshots()
        .map((snapshot) {
      return snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>;
        return AppUser.fromMap(data, doc.id);
      }).toList();
    });
  }

  /// üß© C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng
  Future<void> updateUser(AppUser user) async {
    try {
      if (user.id == null || user.id!.isEmpty) {
        throw Exception('user.id kh√¥ng h·ª£p l·ªá');
      }

      // üîê Hash l·∫°i m·∫≠t kh·∫©u m·ªói khi c·∫≠p nh·∫≠t
      final hashedPassword = SecurityUtils.hashPassword(user.password);

      await _usersCollection.doc(user.id).update({
        'username': user.username,
        'email': user.email,
        'password': hashedPassword,
        'imageUrl': user.imageUrl,
      });
    } catch (e) {
      throw Exception('L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng: $e');
    }
  }

  // ====================================================
  // üßπ XO√Å NG∆Ø·ªúI D√ôNG & ·∫¢NH
  // ====================================================

  /// üß© Xo√° ·∫£nh ng∆∞·ªùi d√πng (n·∫øu c√≥)
  Future<void> deleteUserImage(String? imageUrl) async {
    if (imageUrl == null || imageUrl.isEmpty) return;

    try {
      final publicId = _cloudinaryService.extractPublicId(imageUrl);
      await _cloudinaryService.deleteImage(publicId);
    } catch (e) {
      throw Exception('L·ªói khi xo√° ·∫£nh ng∆∞·ªùi d√πng: $e');
    }
  }

  /// üß© Xo√° to√†n b·ªô ng∆∞·ªùi d√πng (bao g·ªìm c·∫£ ·∫£nh n·∫øu c√≥)
  Future<void> deleteUser(String userId, {String? imageUrl}) async {
    try {
      await deleteUserImage(imageUrl);
      await _usersCollection.doc(userId).delete();
    } catch (e) {
      throw Exception('L·ªói khi xo√° ng∆∞·ªùi d√πng: $e');
    }
  }

  // ====================================================
  // üîé L·∫§Y TH√îNG TIN NG∆Ø·ªúI D√ôNG
  // ====================================================

  /// üß© L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID
  Future<AppUser?> getUserById(String userId) async {
    try {
      final doc = await _usersCollection.doc(userId).get();
      if (!doc.exists) return null;

      final data = doc.data() as Map<String, dynamic>;
      return AppUser.fromMap(data, doc.id);
    } catch (e) {
      throw Exception('L·ªói khi l·∫•y ng∆∞·ªùi d√πng: $e');
    }
  }

}
